// prisma/schema.prisma
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["decimal"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// =====================
// ENUM DEFINITIONS
// =====================
enum AccountType {
    CHECKING
    SAVINGS
    CREDIT_CARD
    INVESTMENT
    LOAN
    CASH
    OTHER
}

enum TransactionType {
    INCOME
    EXPENSE
    TRANSFER
}

enum BudgetRecurrence {
    NONE
    DAILY
    WEEKLY
    BIWEEKLY
    MONTHLY
    QUARTERLY
    ANNUALLY
}

enum DebtStatus {
    ACTIVE
    PAID_OFF
    DEFAULTED
    SETTLED
    COLLECTIONS
}

enum DebtPriority {
    HIGH_INTEREST
    SMALLEST_BALANCE
    HIGHEST_BALANCE
    CUSTOM
}

// =====================
// MODEL DEFINITIONS
// =====================
model User {
    id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    username          String    @unique @db.VarChar(128)
    email             String    @unique @db.VarChar(255)
    passwordHash      String    @db.VarChar(255)
    createdAt         DateTime  @default(now()) @db.Timestamptz
    updatedAt         DateTime  @default(now()) @updatedAt @db.Timestamptz
    lastLogin         DateTime? @db.Timestamptz
    isActive          Boolean   @default(true)
    phoneNumber       String?   @db.VarChar(20)
    emailVerified     Boolean   @default(false)
    phoneVerified     Boolean   @default(false)
    givenName         String?   @db.VarChar(100)
    familyName        String?   @db.VarChar(100)
    profilePictureUrl String?
    deletedAt         DateTime? @db.Timestamptz
    userMetadata      Json?
    appMetadata       Json?

    accounts     Account[]
    categories   Category[]
    budgets      Budget[]
    transactions Transaction[]
    debts        Debt[]
    auditLogs    AuditLog[]

    @@index([email], name: "idx_users_email")
}

model Account {
    id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId          String      @db.Uuid
    accountName     String      @db.VarChar(100)
    accountType     AccountType
    currentBalance  Decimal     @default(0.00) @db.Decimal(18, 2)
    currency        String      @db.Char(3)
    createdAt       DateTime    @default(now()) @db.Timestamptz
    updatedAt       DateTime    @default(now()) @updatedAt @db.Timestamptz
    isActive        Boolean     @default(true)
    deletedAt       DateTime?   @db.Timestamptz
    institutionName String?     @db.VarChar(100)
    lastSyncedAt    DateTime?   @db.Timestamptz

    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    transactions Transaction[]

    @@index([userId], name: "idx_accounts_user")
}

model Category {
    id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId           String?         @db.Uuid
    categoryName     String          @db.VarChar(100)
    categoryType     TransactionType
    parentCategoryId String?         @db.Uuid
    isSystemDefined  Boolean         @default(false)
    createdAt        DateTime        @default(now()) @db.Timestamptz
    updatedAt        DateTime        @default(now()) @updatedAt @db.Timestamptz
    deletedAt        DateTime?       @db.Timestamptz
    colorCode        String?         @db.VarChar(7)

    user         User?                      @relation(fields: [userId], references: [id], onDelete: SetNull)
    parent       Category?                  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id], onDelete: SetNull)
    children     Category[]                 @relation("CategoryHierarchy")
    transactions Transaction[]
    allocations  BudgetCategoryAllocation[]

    @@unique([userId, categoryName], name: "user_category_unique")
    @@index([userId], name: "idx_categories_user")
    @@index([parentCategoryId], name: "idx_categories_parent")
}

model Budget {
    id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String           @db.Uuid
    budgetName        String           @db.VarChar(100)
    startDate         DateTime         @db.Date
    endDate           DateTime         @db.Date
    totalBudgetAmount Decimal          @db.Decimal(18, 2)
    currency          String           @db.Char(3)
    isRecurring       Boolean          @default(false)
    recurrencePeriod  BudgetRecurrence @default(NONE)
    createdAt         DateTime         @default(now()) @db.Timestamptz
    updatedAt         DateTime         @default(now()) @updatedAt @db.Timestamptz
    deletedAt         DateTime?        @db.Timestamptz

    user         User                       @relation(fields: [userId], references: [id], onDelete: Restrict)
    allocations  BudgetCategoryAllocation[]
    transactions Transaction[]

    @@index([userId], name: "idx_budgets_user")
    @@index([startDate, endDate], name: "idx_budgets_dates")
}

model BudgetCategoryAllocation {
    id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    budgetId        String   @db.Uuid
    categoryId      String   @db.Uuid
    allocatedAmount Decimal  @db.Decimal(18, 2)
    createdAt       DateTime @default(now()) @db.Timestamptz
    updatedAt       DateTime @default(now()) @updatedAt @db.Timestamptz

    budget   Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
    category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

    @@unique([budgetId, categoryId], name: "allocation_unique")
}

model Transaction {
    id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    accountId        String          @db.Uuid
    categoryId       String          @db.Uuid
    budgetId         String?         @db.Uuid
    transactionDate  DateTime        @default(now()) @db.Timestamptz
    amount           Decimal         @db.Decimal(18, 2)
    transactionType  TransactionType
    description      String?
    notes            String?
    merchantName     String?         @db.VarChar(255)
    paymentMethod    String?         @db.VarChar(50)
    isCleared        Boolean         @default(false)
    createdAt        DateTime        @default(now()) @db.Timestamptz
    updatedAt        DateTime        @default(now()) @updatedAt @db.Timestamptz
    deletedAt        DateTime?       @db.Timestamptz
    currency         String          @db.Char(3)
    exchangeRate     Decimal         @default(1.0) @db.Decimal(12, 6)
    originalAmount   Decimal?        @db.Decimal(18, 2)
    originalCurrency String?         @db.Char(3)
    reconciledAt     DateTime?       @db.Timestamptz
    reconciliationId String?         @db.Uuid

    account  Account  @relation(fields: [accountId], references: [id], onDelete: Restrict)
    category Category @relation(fields: [categoryId], references: [id])
    budget   Budget?  @relation(fields: [budgetId], references: [id], onDelete: SetNull)
    payment  Payment?
    User     User?    @relation(fields: [userId], references: [id])
    userId   String?  @db.Uuid

    @@index([accountId], name: "idx_transactions_account")
    @@index([transactionDate], name: "idx_transactions_date")
    @@index([categoryId], name: "idx_transactions_category")
    @@index([isCleared], name: "idx_transactions_cleared")
}

model Debt {
    id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId         String        @db.Uuid
    debtName       String        @db.VarChar(100)
    creditorName   String        @db.VarChar(100)
    originalAmount Decimal       @db.Decimal(18, 2)
    currentBalance Decimal       @db.Decimal(18, 2)
    interestRate   Decimal       @db.Decimal(7, 4)
    minimumPayment Decimal       @db.Decimal(18, 2)
    dueDate        DateTime?     @db.Date
    loanType       String?       @db.VarChar(50)
    status         DebtStatus    @default(ACTIVE)
    priority       DebtPriority?
    createdAt      DateTime      @default(now()) @db.Timestamptz
    updatedAt      DateTime      @default(now()) @updatedAt @db.Timestamptz
    payoffDate     DateTime?     @db.Date
    deletedAt      DateTime?     @db.Timestamptz
    apr            Decimal?      @db.Decimal(7, 4)
    termMonths     Int?

    user     User      @relation(fields: [userId], references: [id], onDelete: Restrict)
    payments Payment[]

    @@index([userId], name: "idx_debts_user")
    @@index([status], name: "idx_debts_status")
}

model Payment {
    id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    debtId           String    @db.Uuid
    transactionId    String?   @db.Uuid
    paymentDate      DateTime  @default(now()) @db.Timestamptz
    amountPaid       Decimal   @db.Decimal(18, 2)
    paymentMethod    String?   @db.VarChar(50)
    notes            String?
    createdAt        DateTime  @default(now()) @db.Timestamptz
    deletedAt        DateTime? @db.Timestamptz
    appliedInterest  Decimal   @default(0.00) @db.Decimal(18, 2)
    appliedPrincipal Decimal?  @db.Decimal(18, 2)

    debt        Debt         @relation(fields: [debtId], references: [id], onDelete: Restrict)
    transaction Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)

    @@index([debtId], name: "idx_payments_debt")
    @@index([paymentDate], name: "idx_payments_date")
}

model AuditLog {
    id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    logTimestamp  DateTime @default(now()) @db.Timestamptz
    userId        String?  @db.Uuid
    eventType     String   @db.VarChar(50)
    entityType    String   @db.VarChar(50)
    entityId      String?  @db.Uuid
    operationType String   @db.VarChar(10)
    oldValue      Json?
    newValue      Json?
    description   String?
    ipAddress     String?  @db.VarChar(45)
    userAgent     String?
    sessionId     String?  @db.Uuid

    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([entityType, entityId], name: "idx_audit_entity")
    @@index([logTimestamp], name: "idx_audit_timestamp")
}
